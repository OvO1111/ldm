model:
  base_learning_rate: 2.e-5
  train_target: ldm.models.diffusion.ddpm.CoarseAndFineDiffusion
  test_target: inference.models.InferLatentDiffusion
  params:
    linear_start: 0.0015
    linear_end: 0.0195
    num_timesteps_cond: 1
    log_every_t: 200
    timesteps: 1000
    loss_type: l1
    first_stage_key: image
    cond_stage_key: cond
    conditioning_key: concat
    image_size: [48, 48, 48]  # after first-stage encoding
    channels: 4  # after first-stage encoding
    monitor: val/loss_simple_ema
    cond_stage_trainable: false

    unet_config:
      target: ldm.modules.diffusionmodules.openaimodel.UNetModel
      params:
        image_size: 64  # not used
        in_channels: 6
        out_channels: 4
        model_channels: 128
        attention_resolutions: []
        num_res_blocks: 2
        channel_mult: [1, 2, 4]
        num_head_channels: 32
        use_checkpoint: true  # always use ckpt

    first_stage_config:
      target: ldm.modules.diffusionmodules.model_lesiondiff.LesionDiffusionVQModelInterface
      params:
        monitor: "val/rec_loss"
        image_key: image
        embed_dim: 4
        n_embed: 1024
        dims: 3
        is_conditional: false
        ckpt_path: /ailab/public/pjlab-smarthealth03/leiwenhui/thr/code/ldm/racevq/checkpoints/epoch=000091.ckpt
        lossconfig:
          target: torch.nn.Identity

        ddconfig:
          double_z: False
          z_channels: 4
          resolution: [96, 96, 96]
          in_channels: 4
          out_ch: 4
          ch: 96
          ch_mult: [ 1, 1 ,1 ]  # num_down = len(ch_mult)-1 
          sample_depth: [ 0 ] # specific layer depth for up and down sampling
          num_res_blocks: 2
          attn_resolutions: []
          dropout: 0.0
          dims: 3
          attn_type: none

    # first_stage_config: 
    #   target: ldm.models.autoencoder.AutoencoderKL
    #   params:
    #     monitor: "val/rec_loss"
    #     image_key: image
    #     cond_key: coarse
    #     embed_dim: 4
    #     is_conditional: true
    #     dims: 3
    #     ckpt_path: /ailab/user/dailinrui/data/ldm/static_brats21_cvae_kl_64_64_64/checkpoints/epoch=000871.ckpt
    #     lossconfig:
    #       target: torch.nn.Identity

    #     ddconfig:
    #       double_z: True
    #       z_channels: 4
    #       resolution: [128, 128, 128]
    #       in_channels: 4
    #       condition_channels: 1
    #       out_ch: 4
    #       ch: 96
    #       ch_mult: [1,2,4,4]  # num_down = len(ch_mult)-1
    #       num_res_blocks: 2
    #       dropout: 0.0
    #       attn_resolutions: [8,]  # on z axis, starting with 12->24->48 for len(ch_mult)==4 and resolution==96
    #       attn_type: vanilla
    #       use_checkpoint: True  # always use ckpt

    cond_stage_config: 
      target: ldm.modules.encoders.modules.IdentityEncoder
      params:
        input_size: [96, 96, 96]
        output_size: [48, 48, 48]

  test_only_params:
    save_dataset: true 
    save_dataset_path: /ailab/user/dailinrui/data/ldm/brats21_ldm_128_128_128_vqdown2/dataset_v2
    suffix_keys: 
      samples: .nii.gz
      mask: .nii.gz
    ckpt_path: /ailab/user/dailinrui/data/ldm/brats21_ldm_128_128_128_vqdown2/checkpoints/last-v5.ckpt

data:
  target: main.DataModuleFromConfig
  params:
    batch_size: 1
    num_workers: 2
    wrap: False
    batch_sampler: 
      target: inference.utils.TwoStreamBatchSampler
      params:
        dataset: [train]
        primary_batch_size: 1
        iterate_on_primary_indices: false 
    train:
      target: ldm.data.brats2021.BraTS2021_3D
      params:
        split: train
        crop_to: [96, 96, 96]
        n_fine: 10
    validation:
      target: ldm.data.brats2021.BraTS2021_3D
      params:
        split: val
        crop_to: [96, 96, 96]
        max_size: 50
    test:
      target: ldm.data.base.GenDatasetForMSD
      params:
        base: /ailab/user/dailinrui/data/ldm/brats21_cdm_128_128_128_fine_ft/dataset/samples_value
        resize_to: [96, 96, 96]
        gen_field: mask
        dummy_fields: [image]

lightning:
  callbacks:
    image_logger:
      target: main.ImageLogger
      params:
        train_batch_frequency: 200
        max_images: 10
        log_images_kwargs: 
          ddim_steps: null
        logger:
          inputs: 
            target: image_rescale
          conditioning:
            target: image_rescale
          reconstruction:
            target: image_rescale
          samples:
            target: image_rescale

  trainer:
    benchmark: true
    max_epochs: 1000
    replace_sampler_ddp: false
    limit_test_batches: 500