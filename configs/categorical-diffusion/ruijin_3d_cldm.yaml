model:
  base_learning_rate: 2.0e-05
  target: ldm.models.diffusion.ddpm.LatentDiffusion
  params:
    linear_start: 0.0015
    linear_end: 0.0195
    num_timesteps_cond: 1
    log_every_t: 200
    timesteps: 1000
    first_stage_key: mask
    cond_stage_key: context
    conditioning_key: crossattn
    image_size: [64, 128, 128]  # after first-stage encoding
    channels: 12  # after first-stage encoding
    monitor: val/loss_simple_ema
    cond_stage_trainable: false

    unet_config:
      target: ldm.modules.diffusionmodules.openaimodel.CCDMUNetModel
      params:
        image_size: [64, 128, 128]
        in_channels: 12
        out_channels: 12
        model_channels: 64
        attention_resolutions: [32, 16, 8]
        num_res_blocks: 2
        channel_mult: [1,2,4,4,8]
        use_spatial_transformer: true
        context_dim: 5120
        num_heads: 1
        num_head_channels: 32
        use_checkpoint: true  # always use ckpt
        use_label_predictor: false
        n_labels: 6

    first_stage_config: 
      target: ldm.modules.encoders.modules.CategoricalDiffusionWrapper
      params:
        num_classes: 12
        sample_scheme: majority

    cond_stage_config: 
      target: torch.nn.Identity

data:
  target: main.DataModuleFromConfig
  params:
    batch_size: 1
    num_workers: 12
    wrap: false
    train:
      target: ldm.data.ruijin.Ruijin_3D
      params:
        split: train
        resize_to: [64, 128, 128]
    validation:
      target: ldm.data.ruijin.Ruijin_3D
      params:
        split: val
        resize_to: [64, 128, 128]
        max_size: 5

lightning:
  callbacks:
    image_logger:
      target: main.ImageLogger
      params:
        train_batch_frequency: 200
        val_batch_frequency: 1
        max_images: 10
        logger:
          inputs: 
            target: mask_rescale
            params: 
              n_mask: 11
          samples:
            target: image_rescale
            params: 
              n_mask: 11

  trainer:
    benchmark: True
    max_epochs: 1000